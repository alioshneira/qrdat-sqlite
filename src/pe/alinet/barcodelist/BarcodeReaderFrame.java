/*
 * Copyright (C) 2018 Aliosh Neira <aliosh2006 at gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package pe.alinet.barcodelist;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Logger;
import javax.swing.Timer;
import pe.alinet.barcodelist.BarcodeList;
import pe.alinet.barcodelist.BarcodeListService;
import pe.alinet.util.DateTableCellRenderer;
import pe.alinet.usuarios.Usuario;
import pe.alinet.usuarios.UsuarioService;

/**
 *
 * @author Aliosh Neira <aliosh2006 at gmail.com>
 */
public class BarcodeReaderFrame extends javax.swing.JFrame implements ActionListener, Runnable, ThreadFactory{

    private static final Logger LOG = Logger.getLogger(BarcodeReaderFrame.class.getName());
    
    private Executor executor = Executors.newSingleThreadExecutor(this);
    Webcam webcam = Webcam.getDefault();
    

    /**
     * Creates new form Main
     */
    public BarcodeReaderFrame() {
        initComponents();
        
        //set cell renderer to first column
        
        
        tbBarcodeList.getColumnModel().getColumn(0).setCellRenderer(new DateTableCellRenderer());
        tbBarcodeList.getColumnModel().getColumn(0).setMaxWidth(180);
        tbBarcodeList.getColumnModel().getColumn(0).setMinWidth(150);

        Timer timer = new Timer(1000,this);
        timer.start();
        
        Dimension size = WebcamResolution.VGA.getSize();
        webcam.setViewSize(size);

        WebcamPanel webcampanel = new WebcamPanel(webcam);
        webcampanel.setMirrored(true);
        webcampanel.setSize(size);
        System.out.println(size);
        pMain.add(webcampanel,BorderLayout.CENTER);
        executor.execute(this);
        
    }
    
    private void refreshTable(){
        barcodeListList.clear();
        for (Object o :this.barcodeListQuery.getResultList()){
            BarcodeList b = (BarcodeList) o;
        }
          
        barcodeListList.addAll(barcodeListQuery.getResultList());
        tbBarcodeList.repaint();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        QRdatPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("QRdatPU").createEntityManager();
        barcodeListQuery = java.beans.Beans.isDesignTime() ? null : QRdatPUEntityManager.createQuery("SELECT b  FROM BarcodeList b ORDER BY b.id  DESC").setMaxResults(100);
        barcodeListList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(barcodeListQuery.getResultList());
        pMain = new javax.swing.JPanel();
        pSuperior = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbTime = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        pInferior = new javax.swing.JPanel();
        pMensaje = new javax.swing.JPanel();
        lbMensaje = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbBarcodeList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QRDAT 4.0");

        pMain.setLayout(new java.awt.BorderLayout());

        pSuperior.setToolTipText("");
        pSuperior.setLayout(new javax.swing.BoxLayout(pSuperior, javax.swing.BoxLayout.Y_AXIS));

        lbTime.setFont(lbTime.getFont().deriveFont(lbTime.getFont().getSize()+10f));
        lbTime.setText("00:00");
        jPanel1.add(lbTime);

        pSuperior.add(jPanel1);

        jLabel1.setText("CÃ³digo:");
        jPanel2.add(jLabel1);

        txtCodigo.setFont(txtCodigo.getFont().deriveFont(txtCodigo.getFont().getSize()+5f));
        txtCodigo.setMinimumSize(new java.awt.Dimension(10, 20));
        txtCodigo.setPreferredSize(new java.awt.Dimension(100, 24));
        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });
        jPanel2.add(txtCodigo);

        pSuperior.add(jPanel2);

        pMain.add(pSuperior, java.awt.BorderLayout.PAGE_START);

        pInferior.setPreferredSize(new java.awt.Dimension(452, 140));
        pInferior.setLayout(new javax.swing.BoxLayout(pInferior, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout pMensajeLayout = new javax.swing.GroupLayout(pMensaje);
        pMensaje.setLayout(pMensajeLayout);
        pMensajeLayout.setHorizontalGroup(
            pMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
            .addGroup(pMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pMensajeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lbMensaje)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pMensajeLayout.setVerticalGroup(
            pMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 7, Short.MAX_VALUE)
            .addGroup(pMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pMensajeLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lbMensaje)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pInferior.add(pMensaje);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(452, 160));

        tbBarcodeList.setFont(tbBarcodeList.getFont().deriveFont(tbBarcodeList.getFont().getSize()+2f));
        tbBarcodeList.setRowHeight(30);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, barcodeListList, tbBarcodeList);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Fecha y hora");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${usuario}"));
        columnBinding.setColumnName("Nombre de usuario");
        columnBinding.setColumnClass(pe.alinet.usuarios.Usuario.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(tbBarcodeList);
        if (tbBarcodeList.getColumnModel().getColumnCount() > 0) {
            tbBarcodeList.getColumnModel().getColumn(1).setResizable(false);
        }

        pInferior.add(jScrollPane2);

        pMain.add(pInferior, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        String codigo = this.txtCodigo.getText();
        procesar(codigo);
    }//GEN-LAST:event_txtCodigoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BarcodeReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BarcodeReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BarcodeReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BarcodeReaderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BarcodeReaderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager QRdatPUEntityManager;
    private java.util.List<pe.alinet.barcodelist.BarcodeList> barcodeListList;
    private javax.persistence.Query barcodeListQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbMensaje;
    private javax.swing.JLabel lbTime;
    private javax.swing.JPanel pInferior;
    private javax.swing.JPanel pMain;
    private javax.swing.JPanel pMensaje;
    private javax.swing.JPanel pSuperior;
    private javax.swing.JTable tbBarcodeList;
    private javax.swing.JTextField txtCodigo;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        Date datetime = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, dd MMMM yyyy   hh:mm:ss a");
        this.lbTime.setText(formatter.format(datetime));

    }

    @Override
    public void run() {
        do {
            try {
                    Thread.sleep(100);
            } catch (InterruptedException e) {
                    e.printStackTrace();
            }
            
            BufferedImage image = null;
            
            
            if (webcam.isOpen()) {

                if ((image = webcam.getImage()) == null) {
                        continue;
                }
                
                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
                Result result = null;
                String codigo = null;
                try {
                    result = new MultiFormatReader().decode(bitmap);
                    codigo = result.getText();
                    procesar(codigo);
                    
                } catch (NotFoundException e) {
                        // fall thru, it means there is no QR code in image
                    //Logger.getLogger(QRScannerFrame.class.getName()).log(Level.FINEST, null, e);
                }

                if (codigo != null){

                    //this.lbOut.setText(qrscanner.getText());
                    
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
            
        }
        while(true);

    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "barcode-reader-panel");
        t.setDaemon(true);
        return t;
    }
    
    private void procesar(String codigo){
        
        Usuario u = UsuarioService.getById(codigo);
        if (u != null){
            BarcodeListService.add(u);
            this.lbMensaje.setText("CÃ³digo: "+codigo);
            this.lbMensaje.setForeground(Color.blue);
        }
        else {
            this.lbMensaje.setText("No se encontrÃ³ el usuario con el cÃ³digo: "+codigo);
            this.lbMensaje.setForeground(Color.red);
        }
        
        Toolkit.getDefaultToolkit().beep();

        this.txtCodigo.setText("");
        refreshTable();
    }
}
